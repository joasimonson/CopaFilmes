name: .NET
on:
  push:
    branches:
      - main
    paths:
      - ./server/**
      - .github/workflows/server.yml
      - codecov.yml
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./server

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x
      - name: Cache Nuget packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Install project dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Analyze and report to SonarCloud with OpenCover
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"joasimonson_CopaFilmes_BackEnd" /o:"joasimonson" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="./**/coverage.opencover.xml" /d:sonar.coverage.exclusions="tests/**"
          dotnet test --logger trx --results-directory ./TestResults/ /p:CollectCoverage=true /p:CoverletOutputFormat=\"json,opencover,cobertura\" /p:CoverletOutput=../../TestResults/ /p:Exclude=\"[CopaFilmes.Api.Test.*]*\" /p:ExcludeByFile=\"**/*.Designer.cs\" /p:MergeWith="../../TestResults/coverage.json" -m:1
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"
      #- name: Analyse and report to SonarCloud with ReportGenerator
      #  run: |
      #    dotnet tool install --global dotnet-reportgenerator-globaltool
      #    ./.sonar/scanner/dotnet-sonarscanner begin /k:"joasimonson_CopaFilmes_BackEnd" /o:"joasimonson" /d:sonar.login="sonar_key" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths="./sonarqubecoverage/SonarQube.xml"
      #    dotnet test --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      #    reportgenerator "-reports:./TestResults/**/coverage.cobertura.xml" "-targetdir:sonarqubecoverage" "-reporttypes:SonarQube"
      #    ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="sonar_key"
      - name: Upload coverage to Codecov
        run: bash <(curl https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }} -F back-end
